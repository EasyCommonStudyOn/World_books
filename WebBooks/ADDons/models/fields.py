"""
Поля, описываемые в моделях данных и имеющие разные типы, могут иметь достаточно
большое количество общих аргументов:
□ help text - предоставляет текстовую метку для НТМL-форм (например, на сайте
администратора или на форме пользователя);
□ verbose name - удобно читаемое имя для поля, используемое в качестве его метки.
- Если этот аргумент не указан, то Django автоматически сформирует его по умолчанию
от имени поля;
□ ctefault - значение по умолчанию для поля. Это может быть значение или вызываемый
объект, и в этом случае объект будет вызываться каждый раз, когда создается
новая запись;
□ null - если аргумент имеет значение True, то Django будет хранить пустые значения
в базе данных для полей как NULL, где это уместно (поле типа charFielct вместо этого
сохранит пустую строку). По умолчанию принимается значение False;
□ Ыank - если аргумент имеет значение True, поле в ваших формах может быть пустыt,1.
По умолчанию принимается значение False, означающее, что проверка формы
Django заставит вас ввести в это поле некоторое значение. Этот аргумент часто ис-
пользуется с аргументом null = True - если вы разрешаете ввод пустых значений, то
также должны обеспечить, чтобы база данных могла принять эти пустые значения;
□ choices - предоставление выбора из вариантов значений для этого поля. Если параметр
choices задан, то соответствующий виджет формы будет являться полем с вариантами
выбора из нескольких значений (вместо стандартного текстового поля);
□ primary_key- если аргумент имеет значение тrue, то текущее поле будет выступать
в качестве первичного ключа для модели (первичный ключ - это специальный
столбец базы данных, предназначенный для однозначной идентификации всех разных
записей таблицы). Если в качестве первичного ключа не указано ни одно поле,
то Django автоматически добавит ключевое поле (ict) в таблицу данных.

Указанные общие аргументы могут использоваться при объявлении полей следующих
типов:

□ CharField - служит для определения строк фиксированной длины: от короткой до
средней. Следует указывать максимальную длину строки max length для хранения
данных;
□ тextField - предназначено для больших строк произвольной длины. Вы можете указать
для поля max length, но это значение будет задействовано только тогда, когда
поле отображается в формах ( оно не применяется на уровне базы данных);
□ IntegerField - это поле для хранения значений (целого числа) и для проверки введенных
в форму значений в виде целых чисел;
□ DateField и DateTimeField - служат для хранения дат и информации о дате или времени
(как в Python datetime.date и фtetime.datetime соответственно). Эти поля могут
дополнительно объявлять параметры:
• auto now=Тrue (для установки поля на текущую дату каждый раз, когда модель сохраняется);
• auto_now_add (только для установки даты, когда модель бьmа впервые создана);
• по умолчанию (чтобы установить дату по умолчанию, которую пользователь
может переустановить );
□ EmailField - служит для хранения и проверки адресов электронной почты;
□ FileField и ImageField - предназначены для загрузки файлов и изображений
(ImageField просто добавляет дополнительную проверку, является ли загруженный
файл изображением). Они имеют параметры для определения того, как и где хранятся
загруженные файлы;
□ AutoField - это особый тип IntegerField, который автоматически увеличивается.
Первичный ключ (id) этого типа автоматически добавляется в вашу модель, если вы
явно не укажете его;
□ ForeignKey - служит для указания отношения «один ко многим» к другой модели
базы данных (например, автомобиль определенной модели имеет одного производителя,
но некоторый производитель может делать много автомобилей разных марок).
Сторона отношения «один» - это модель, содержащая данный ключ;
□ мanyТoManyField - служит для определения отношения «многие ко многим» (например,
книга может иметь несколько жанров, и каждый жанр может содержать не-сколько книг).Эти типы полей имеют параметр on_delete, определяющий, что происходит, когда
связанная запись удаляется



"""