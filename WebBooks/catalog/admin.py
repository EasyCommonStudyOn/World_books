"""
1.Для регистрации моделей
2.для упрощения работы с административной панелью можно настроить интерфейс
пользователя: Для изменения отображения модели в пользовательском интерфейсе административной
панели необходимо определить класс мoctelAdmin ( он описывает расположение элементов
интерфейса, где мoctel- наименование модели) и зарегистрировать его для использования
с этой моделью.
List views ( список представлений):
• добавление дополнительных отображаемых полей или информации для каждой
записи;
• добавление фильтров для отбора записей по разным критериям (например, статус
выдачи книги);
• добавление дополнительных вариантов выбора в меню действий и места расположения
этого меню на форме.
□ Detail views (подробное представление):
• выбор отображаемых полей, их порядка, группирования и т. д.;
• добавление связанных полей к записи (например, возможности добавления и
редактирования записей книг при создании записи автора).

3.Если в окне администратора Django в списке или в таблице присутствует множество
элементов, то имеется возможность отфильтровать эти данные по некоторым признакам.
Это выполняется путем задания фильтра в атрибуте list_filter.

4.Для изменения списка отображаемых полей также можно использовать атрибут exclude,
который позволяет исключить часть полей модели из отображения в форме, при этом
все остальные поля модели будут отображаться в форме.

5.В панели администрирования Django есть возможность разделять веб-страницы на разделы
или секции (sections) для группировки связанной информации с помощью атрибута
fieldsets.

6.



"""

from django.contrib import admin
from django.utils.html import format_html
from .models import Author, Book, Genre, Language, Publisher, Status, BookInstance


class AuthorAdmin(admin.ModelAdmin):
    list_display = ('last_name',
                    'first_name', 'photo',
                    'show_photo')  # Чтобы показать большее число полей, изменить порядок их отображения или ввести дополнительные поля, можно создать новый кортеж list_display.
    fields = ['last_name', 'first_name', ('date_of_birth',
                                          'photo')]  # поля, которые должны отображаться в форме в порядке их следования. Поля в детальном отображении сведений об авторах по умолчанию будут отображаться по вертикали, но два поля (поля с датами) отобразим горизонтально, для чего дополнительно сгруппируем их в кортеже
    readonly_fields = [
        "show_photo"]  # Так как этого поля нет в модели, то мы вносим его в список поле с признаком «только для чтения» с использованием инструкции

    def show_photo(self,
                   obj):  # В административной панели по умолчанию отображаются все поля модели данных. Нопри желании можно не только изменить порядок отображения существующих полей,но и добавить новые поля, которых не было в модели, и поясняющие надписи к этимполям. Воспользуемся такой возможностью для того, чтобы в формах административнойпанели показать загруженные изображения.
        return format_html(
            f'<img src="{obj.photo.url}" style="max-height: 100px">'
        )

    show_photo.short_description = 'Фото'


admin.site.register(Author, AuthorAdmin)


class BooksInstanceInline(admin.TabularInline):
    model = BookInstance


@admin.register(
    Book)  # для создания и регистрации новых моделей мы воспользовались декоратором @register ( он делает то же самое, что и метод admin.site.register()):
class BookAdmin(admin.ModelAdmin):
    list_display = ('title', 'genre', 'language', 'display_author', 'show_photo')
    """
     def display_author(self): #Для того чтобы сформировать список авторов книги, мы добавим функцию (метод) display_author в модели данных вооk. Эта функция станетформировать строку, в которой будут представлены все авторы книги.
        return ', '.join([author.last_name for author in
                          self.author.all()]) #В этой функции организован цикл с инструкцией for. В теле цикла выбираются все авторы, связанные с данной книгой, из них формируется список, который будет возвращен в точку вызова.
    display_author.short_description = 'Авторы'

    """
    list_filter = ('genre',
                   'authors')  # Здесь к классу, описывающему книги, к списку отображаемых полей добавлен фильтрна жанр и на авторов книг
    inlines = [
        BooksInstanceInline]  # Теперь на этой форме щелкнем мышью на одной из книг. В результате откроется новое окно с подробными сведениями о выбранной книге, а также будут показаны связанные записи со сведениями обо всех экземплярах этой книги.
    readonly_fields = ["show_photo"]

    def show_photo(self, obj):
        return format_html(
            f'<img src="{obj.photo.url}" style="max-height: 100px">'
        )

    show_photo.short_description = 'Обложка'


@admin.register(BookInstance)
class BookInstanceAdmin(admin.ModelAdmin):
    list_display = ('book', 'status', 'borrower', 'due_back', 'id')
    list_filter = ('book', 'status')  # к классу, описьmающему экземпляры книг, добавлен фильтр на книги и на жанр книг.
    fieldsets = (
        ('Экземпляр книги', {
            'fields': ('book', 'inv_nom'),
        }),
        ('Статус и окончание его действия', {
            'fields': ('status', 'due_back', 'borrower'),
        })
        # в модели с данными об экземплярах книг (вookinstance) мы имеем информацию о каждом конкретном экземпляре книги (поля book, inv_nom) , а также о статусе экземпляраи дате, когда действие статуса заканчивается (status, due_Ьack). Мы можем разделитьэти поля, разместив их в разные секции.
    )


admin.site.register(Genre)
admin.site.register(Language)
admin.site.register(Publisher)
admin.site.register(Status)
